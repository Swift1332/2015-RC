// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1332.Hilgenfeld;

import org.usfirst.frc1332.Hilgenfeld.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick drivePad;
    public JoystickButton t1PUB1;
    public JoystickButton t1ReturnB2;
    public JoystickButton cOOPStackB5;
    public JoystickButton cOOPStackReturnB6;
    public Joystick opPad;
    public Joystick arcadeStick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        arcadeStick = new Joystick(2);
        
        opPad = new Joystick(1);
        
        cOOPStackReturnB6 = new JoystickButton(opPad, 6);
        cOOPStackReturnB6.whenPressed(new COOPStackReturn());
        cOOPStackB5 = new JoystickButton(opPad, 5);
        cOOPStackB5.whenPressed(new COOPStack1());
        t1ReturnB2 = new JoystickButton(opPad, 2);
        t1ReturnB2.whenPressed(new NarrowOpen());
        t1PUB1 = new JoystickButton(opPad, 1);
        t1PUB1.whenPressed(new NarrowClose());
        drivePad = new Joystick(0);
        

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("TankDrive", new TankDrive());

        SmartDashboard.putData("ArcadeDrive", new ArcadeDrive());

        SmartDashboard.putData("T1 PU", new T1PU());

        SmartDashboard.putData("T1Return", new T1Return());

        SmartDashboard.putData("T1StackPU", new T1StackPU());

        SmartDashboard.putData("T1StackReturn", new T1StackReturn());

        SmartDashboard.putData("COOPStack1", new COOPStack1());

        SmartDashboard.putData("COOPStackReturn", new COOPStackReturn());

        SmartDashboard.putData("Narrow Open", new NarrowOpen());

        SmartDashboard.putData("Narrow Close", new NarrowClose());

        SmartDashboard.putData("Wide Open", new WideOpen());

        SmartDashboard.putData("Wide Close", new WideClose());

        SmartDashboard.putData("AirOn", new AirOn());

        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        
        //SMartDashboard.


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDrivePad() {
        return drivePad;
    }

    public Joystick getOpPad() {
        return opPad;
    }

    public Joystick getArcadeStick() {
        return arcadeStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

